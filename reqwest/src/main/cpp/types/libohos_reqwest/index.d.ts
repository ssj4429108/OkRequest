/* auto-generated by OHOS-RS */
/* eslint-disable */



export interface ArkRequest {
  url: string
  method: string
  headers?: Record<string, string>
  protocol?: string
  body?: ArrayBuffer
  dns?: Record<string, Array<string>>
  cacheOption?: CacheOption
}

export interface ArkResponse {
  code: number
  headers?: Record<string, string>
  body?: ArkResponseBody
  protocol: string
  message: string
}

export interface ArkResponseBody {
  body: ArrayBuffer
  contentLength: bigint
}

export declare const enum CacheMode {
  /**
    * Will inspect the HTTP cache on the way to the network.
    * If there is a fresh response it will be used.
    * If there is a stale response a conditional request will be created,
    * and a normal request otherwise.
    * It then updates the HTTP cache with the response.
    * If the revalidation request fails (for example, on a 500 or if you're offline),
    * the stale response will be returned.
    */
  Default = 0,
  /** Behaves as if there is no HTTP cache at all. */
  NoStore = 1,
  /**
    * Behaves as if there is no HTTP cache on the way to the network.
    * Ergo, it creates a normal request and updates the HTTP cache with the response.
    */
  Reload = 2,
  /**
    * Creates a conditional request if there is a response in the HTTP cache
    * and a normal request otherwise. It then updates the HTTP cache with the response.
    */
  NoCache = 3,
  /**
    * Uses any response in the HTTP cache matching the request,
    * not paying attention to staleness. If there was no response,
    * it creates a normal request and updates the HTTP cache with the response.
    */
  ForceCache = 4,
  /**
    * Uses any response in the HTTP cache matching the request,
    * not paying attention to staleness. If there was no response,
    * it returns a network error.
    */
  OnlyIfCached = 5,
  /**
    * Overrides the check that determines if a response can be cached to always return true on 200.
    * Uses any response in the HTTP cache matching the request,
    * not paying attention to staleness. If there was no response,
    * it creates a normal request and updates the HTTP cache with the response.
    */
  IgnoreRules = 6
}

export interface CacheOption {
  cacheMode: CacheMode
}

export interface Cert {
  cert: string
  ty: string
}

export interface Config {
  timeout: number
  tls?: TlsConfig
  ignoreSsl?: boolean
  forceRustlsSsl?: boolean
  noProxy?: boolean
  enableCurlLog?: boolean
}

export interface TlsConfig {
  caCert?: Array<Cert>
  clientCert?: string
}

export declare function toCurl(request: ArkRequest): string

export declare class ArkHttpClient {
  config: Config
  constructor(config?: Config | undefined | null)
  send(request: ArkRequest): Promise<ArkResponse>
}

